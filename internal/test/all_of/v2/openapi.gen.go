// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/stefanobaghino/oapi-codegen/v2 version v2.0.0-00010101000000-000000000000 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Person defines model for Person.
type Person struct {
	FirstName          string `json:"FirstName"`
	GovernmentIDNumber *int64 `json:"GovernmentIDNumber,omitempty"`
	LastName           string `json:"LastName"`
}

// PersonProperties These are fields that specify a person. They are all optional, and
// would be used by an `Edit` style API endpoint, where each is optional.
type PersonProperties struct {
	FirstName          *string `json:"FirstName,omitempty"`
	GovernmentIDNumber *int64  `json:"GovernmentIDNumber,omitempty"`
	LastName           *string `json:"LastName,omitempty"`
}

// PersonWithID defines model for PersonWithID.
type PersonWithID struct {
	FirstName          string `json:"FirstName"`
	GovernmentIDNumber *int64 `json:"GovernmentIDNumber,omitempty"`
	ID                 int64  `json:"ID"`
	LastName           string `json:"LastName"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5ST0WvbMBDG/5VD26NxWjb24LeybMUwusDa9aEp9GKdY3XySZPODSbkfx+y3dRhUNq8",
	"RIk/3333u0975TwxeqMK9Sk/y89VpgzXThV79UQhGseqUOf5WX6mMiVGLKlCXVOUCBfW/qyhcq130UhS",
	"HjLlUZqY3l54ixU1zmoK6feWJH05TwGTuNSqUKuZJlOaYhWMl7Hpb7RGo7gQYYcsgAKWMAo4JkhtMogO",
	"pDERWvxDEaShFhr0vs/XrDIVKHrHkQY7mmrsrIzHeRt/YqFyLMSDDL23phq8Lh5j0u5VrBpqMZ0+BqpV",
	"oT4shvmZWOJifBoXKwrR8a2Rplyqw/RJtZ+VL6WG46hfhcRGzOhXep9Iu80jVfIfm+uGIgEGgtqQ1Wl2",
	"FIieKlP3gOCHijlcN9QPMrQW3PA22gyQ9Zp3rrMaNgRdJA2bHpDh4Zs28gBRektwsSqBWHtnWDLYNRQI",
	"CKsGTDzWGkn7E+vfTYhyhS3N5ogSDG9TQH7gKw8v3RMFbomlXF517WaMziQzLLQdtlS70KKMf335rAa6",
	"I8S3oDMxTfAMKYOdkQZa5CFsPdTJfkIENqWNsaUMNp0cZ4ZyuWYe3CXCJsIRZSDpAk844eGS5jBzuCVo",
	"KWwpRXVqv+YXeKMTZCcNBfg1BAR2jakacGx78ME9GU0RAv3tTCA9bX9cAqbrqIq7t2RzlrVDtlfP9VRx",
	"N9vebFf3h/sj4inX7wYNgSoXNGB8wVQH1wLC10AodAxbDqVAuoloOK45ZTcBm6LuakBYzXeHDKi1mbYT",
	"KLouVAQ3N+Xy/WgGIKeBPpn2lRRmJyDL5YDtcDj8CwAA///4hDAGZQUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package deps provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/stefanobaghino/oapi-codegen/v2 version v2.0.0-00010101000000-000000000000 DO NOT EDIT.
package deps

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BaseError defines model for BaseError.
type BaseError struct {
	// Code The underlying http status code
	Code int32 `json:"code"`

	// Domain The domain where the error is originating from as defined by the service
	Domain string `json:"domain"`

	// Message A simple message in english describing the error and can be returned to the consumer
	Message string `json:"message"`

	// Metadata Any additional details to be conveyed as determined by the service. If present, will return map of key value pairs
	Metadata *map[string]string `json:"metadata,omitempty"`
}

// Error defines model for Error.
type Error = BaseError

// N401 defines model for 401.
type N401 = Error

// N403 defines model for 403.
type N403 = Error

// N410 defines model for 410.
type N410 = Error

// DefaultError defines model for DefaultError.
type DefaultError = Error

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7SVUW/jNgzHvwrB7dFI0ssNGPyW7bahA7YdbtvToSgUi451kyVVotNmgb/7QNlJ7GZo",
	"H4rrU2VS5J8/MtQRfSCngsES14vVYo0FGld7LI/Ihi1hib95TTZhgXuKyXiHJb5brBYr7AtMFOUrlp+P",
	"2EWLJS6xvyswKG4Slse+wMq3wTtyLGeMlIJ3ifLhA9Wqs/xTjD7KWVOqogk8JBmtQGKG00WofQTlDsPn",
	"BMYBNwSbj7couRyTY4mlQrCmUhJr+SVJwCOmqqFWyX/fRqqxxG+WF3XLwZqWg5y+7/sC36/W18J+9nFr",
	"tCa3gFunJQkl4EYxRHroKDFUyjnPsCVQHTc+mn9Jz+UxPfEyWGWeCeNDEOaJo3E7LJCeVBtyGzZVRSnB",
	"B3KGtLB/wfTm4ifRj1h5TVi+X60L1L7NknHTcYMFtpSS2l1rKDCSyolHw/1J3Ij15hrr3+4C64psiH5v",
	"NGmoImlybJRNYBII5r2y5s14f31kiUdPwcTnfK9tXwfwzUuAb12uM0+UABiyT0mPHvebuceI/GZ1jfwT",
	"VT5qcB6sdzuKoPbKWLW19Facv3hHc4inL18F3c1qgm6GLaedQBpkDEzGwBLnvIOUtX/UeZ+9JOUHlWiU",
	"cyfBH7o8GeXnQdBZzEXJWcJdccLmt1+oYiwwRB8osqFxRaoRy3O88+ZtYPAESQkpUGVqUwH7vBBlM5uK",
	"QDkt60h2UZdIi9nkH1B9yH70pCqZ7tTRAv5sfGd19nXmoSN4NNwYBwrO9Vwa+ilnv/9RCs44L1ByFa8z",
	"eRXF0N0zCOOYdhSvSPzViGBN0R6M20HDHCCx4i7BmLr2sVU8hFi/m5bx3WrVT+bldejJyEUYb8j7Q25n",
	"TWpg8NyKhEw2v1sT/pG4i27ogThU3qWuzfVMdvmOJs+HlZ3KjXJw871M/mnGX5MpRAZfeGwo0kSQSeCj",
	"2RmnWJTW0begEmiqjWjbHqbjM5OGGRQrrXj66z/3TmltJL+yH2ddnEvtr5C6A1yugiZWxiaBtM2M9nQg",
	"PUhkiu3/qFzAbQ0hUiLHBTwaa0fW0KoAvoZ/6CCvREcQlIkJZytkHLnD76oVmdOjwDoPcj/8/RcAAP//",
	"ljkPpzMJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
